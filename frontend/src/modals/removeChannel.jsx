import { useEffect } from 'react';
import { Modal } from 'react-bootstrap';
import { useDispatch, useSelector } from 'react-redux';
import axios from 'axios';
import useAuth from '../hooks/useAuth.js';
import routes from '../routes.js';
import socket from '../socket.js';
import { closeModal } from '../slices/modalsSlice.js';
import { removeChannel, setCurrentChannel } from '../slices/channelsSlice.js';
import { removeMessage } from '../slices/messagesSlice.js';

const RemoveChannel = () => {
  const { user: { token } } = useAuth();
  const dispatch = useDispatch();

  const removingChannelId = useSelector((state) => state.modals.removingChannelId);
  const currentChannelId = useSelector((state) => state.channels.currentChannelId);

  useEffect(() => {
    const handleRemoveChannel = (payload) => {
      console.log('payload üçÄ===>>', payload);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
      if (payload) {
        const { id } = payload; // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∫–∞–Ω–∞–ª–∞

        // –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª
        dispatch(removeChannel(payload));

        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª
        if (currentChannelId === id) {
          dispatch(setCurrentChannel(1)); // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º—ã–π –∫–∞–Ω–∞–ª —Ç–µ–∫—É—â–∏–π, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—ã–π
        } else {
          dispatch(setCurrentChannel(id)); // –ò–Ω–∞—á–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —É–¥–∞–ª—è–µ–º—ã–π
        }

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        dispatch(removeMessage(payload));
      } else {
        console.error('Payload or payload.data is undefined:', payload);
      }
    };

    socket.on('removeChannel', handleRemoveChannel); // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ

    return () => {
      socket.off('removeChannel', handleRemoveChannel); // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    };
  }, [currentChannelId, dispatch]);

  const handledRemoveChannel = async () => {
    try {
      await axios.delete(routes.removeChannelsPath(removingChannelId), {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      // => { id: '3'}
      dispatch(closeModal());
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞', error);
    }
  };

  return (
    <Modal show centered onHide={() => dispatch(closeModal())}>
      <Modal.Header closeButton>
        <Modal.Title>–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª</Modal.Title>
      </Modal.Header>

      <Modal.Body>
        <p className="lead">–£–≤–µ—Ä–µ–Ω—ã?</p>
        <div className="d-flex justify-content-end">
          <button
            onClick={() => dispatch(closeModal())}
            type="button"
            className="me-2 btn btn-secondary"
          >
            –û—Ç–º–µ–Ω–∏—Ç—å
          </button>
          <button
            onClick={handledRemoveChannel}
            type="button"
            className="btn btn-danger"
          >
            –£–¥–∞–ª–∏—Ç—å
          </button>
        </div>
      </Modal.Body>
    </Modal>
  );
};
export default RemoveChannel;
